module ALU(
	input
//	reg	clk,
	wire	[4:0]   OP,
//	reg	[2:0]   OS,
	reg	[15:0]  AR,
	reg	[15:0]  DR,

	output
//	reg	clk',
	reg	CFW,
	reg	EFW,
//	reg	[7:0]	PC',
	reg	[15:0]	AW,
	reg	[15:0]	DW,
	reg	[15:0]	OB
);
    
	 always @(*) begin
		case(OP)
//			5'b00000: 	//NOP
			5'b00001: OB <= DR;			//PRINT
			5'b00010: DW <= AR;			//LOAD
			5'b00011: AW <= DR;			//STORE
			5'b00100: EFW <= 1'b1;		//EOP

			5'b01000: if(AR < DR)		//LT
							CFW <= 1'b1;
					    else
							CFW <= 1'b0;

			5'b01001: if(AR < DR)		//GT
							CFW <= 1'b1;
					    else
							CFW <= 1'b0;

			5'b01100: PC <= DW;			//JUMP
			5'b01101: if(CF)			//BEQ
							DR <= PC;
			5'b01110: if(!CF)			//BNE
							DR <= PC;
			

//			5'b10000:					//ADD
//			5'b10001:					//SUB
//			5'b10010:					//MUL
//			5'b10011:					//DIV
//			5'b10100:					//MOD
			5'b10101: AW <= ~AR;		//NOT
			5'b10110: AW <= AR|DR;		//OR
			5'b10111: AW <= AR&DR;		//AND
			default:	 AW <= AR;
		endcase
	 
	 
	 end


endmodule